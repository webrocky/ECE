# -*- coding: utf-8 -*-
"""ghedpop(B).ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/16TIBOGlnPBKztdx1eLYEdGda9wq-fpg3

**#Loading the updated data**
**filename - updated_ghedpop.csv**
"""

import pandas as pd
df = pd.read_csv('updated_ghedpop.csv')

"""**Display data**"""

# Display initial rows of the datasets
print(df.head())

"""**Basic information**"""

# Display basic information about the dataset
print("Basic Information:")
df.info()

"""**Distribution of country**"""

# Explore the distribution of a specific column (replace 'column_name' with the actual column name)
column_name = 'country'  # Replace with the actual column name you want to explore
print(f"\nDistribution of {column_name}:")
df[column_name].value_counts()

"""**Descriptive statistics**"""

# Descriptive statistics for numerical columns
print("\nDescriptive Statistics:")
print(df.describe())

"""**Missing values**"""

# Check for missing values in the dataset
print("\nMissing Values:")
df.isnull().sum()

"""***#Selecting relevant data***"""

import pandas as pd

# Step 1: Load the CSV file with low_memory=False to prevent dtype warning
df = pd.read_csv('updated_ghedpop.csv', low_memory=False)

# Step 2: Select relevant columns for analysis
df_relevant = df[['country', 'Year', 'che_pc_usd', 'population_60_plus', 'gdp_pc_usd',
                  'gghed_pc_usd', 'pvtd_pc_usd', 'oop_pc_usd', 'ext_pc_usd', 'che']]

# Step 3: Clean the numeric columns by removing commas and converting to numeric
numeric_columns = ['che_pc_usd', 'gdp_pc_usd', 'gghed_pc_usd', 'pvtd_pc_usd', 'oop_pc_usd', 'ext_pc_usd', 'che']

for col in numeric_columns:
    # Ensure the column is of string type before applying str.replace
    if df_relevant[col].dtype == 'object':
        df_relevant[col] = pd.to_numeric(df_relevant[col].str.replace(',', ''), errors='coerce')
    else:
        df_relevant[col] = pd.to_numeric(df_relevant[col], errors='coerce')

# Step 4: Calculate Elderly-Specific Total Metrics
df_relevant['che_elderly'] = df_relevant['che_pc_usd'] * df_relevant['population_60_plus']
df_relevant['gghed_elderly'] = df_relevant['gghed_pc_usd'] * df_relevant['population_60_plus']
df_relevant['pvtd_elderly'] = df_relevant['pvtd_pc_usd'] * df_relevant['population_60_plus']
df_relevant['oop_elderly'] = df_relevant['oop_pc_usd'] * df_relevant['population_60_plus']
df_relevant['ext_elderly'] = df_relevant['ext_pc_usd'] * df_relevant['population_60_plus']
df_relevant['gdp_elderly'] = df_relevant['gdp_pc_usd'] * df_relevant['population_60_plus']

# Step 5: Calculate Elderly-Specific Per Capita Metrics (assuming elderly GDP per capita is same as overall GDP)
df_relevant['che_pc_usd_elderly'] = df_relevant['che_elderly'] / df_relevant['population_60_plus']
df_relevant['gghed_pc_elderly'] = df_relevant['gghed_elderly'] / df_relevant['population_60_plus']
df_relevant['pvtd_pc_elderly'] = df_relevant['pvtd_elderly'] / df_relevant['population_60_plus']
df_relevant['oop_pc_elderly'] = df_relevant['oop_elderly'] / df_relevant['population_60_plus']
df_relevant['ext_pc_elderly'] = df_relevant['ext_elderly'] / df_relevant['population_60_plus']
df_relevant['gdp_pc_usd_elderly'] = df_relevant['gdp_pc_usd']

# Step 6: Create a final DataFrame with all elderly-specific columns
df_elderly = df_relevant[['country', 'Year', 'population_60_plus', 'gdp_elderly', 'che_elderly',
                          'gghed_elderly', 'pvtd_elderly', 'oop_elderly', 'ext_elderly',
                          'che_pc_usd_elderly', 'gghed_pc_elderly', 'pvtd_pc_elderly',
                          'oop_pc_elderly', 'ext_pc_elderly', 'gdp_pc_usd_elderly']]

# Step 7: Display the final DataFrame
print(df_elderly.head())

# Create a separate DataFrame for elderly-specific columns and save it to a new CSV file.

# Prepare the elderly-specific DataFrame
df_elderly = df_relevant[['country', 'Year', 'population_60_plus', 'gdp_elderly', 'che_elderly',
                          'gghed_elderly', 'pvtd_elderly', 'oop_elderly', 'ext_elderly',
                          'che_pc_usd_elderly', 'gghed_pc_elderly', 'pvtd_pc_elderly',
                          'oop_pc_elderly', 'ext_pc_elderly', 'gdp_pc_usd_elderly']]

# Save the elderly-specific data to a new CSV file
df_elderly.to_csv('/content/elderly_specific_data.csv', index=False)

df_elderly.head()  # Display the first few rows of the new elderly-specific data file